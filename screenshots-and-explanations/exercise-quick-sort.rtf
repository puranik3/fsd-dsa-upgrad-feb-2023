{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww35640\viewh19360\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Quick sort dry run (working out with pen and paper)
\f1\b0 \
\
4 		||	 	1	8	9	3	8	1	9	3\
\
4 				1  3	1	3	8	9	9	8\
\
Let\'92s bring the pivot to the correct place\
3 				1  3	1	4	8	9	9	8\
\
\
pivot = 4\
\
curr = 0\
Swap arr[0] with arr[0] -> 1 remains at arr[0]\
\
curr++ -> curr = 1\
\
arr[1] -> 8 -> do nothing\
arr[2] -> 9 -> do nothing\
\
arr[3] -> 3 -> swap arr[curr] with arr[3] -> arr[1] with arr[3], \
curr++ -> curr = 2\
\
arr[4] -> 8 -> do nothing\
\
arr[5] -> 1 -> swap arr[curr] with arr[5] -> arr[2] with arr[5], \
curr++ -> curr = 3\
\
arr[6] -> 9 -> do nothing\
\
arr[7] -> 4 -> swap arr[curr] with arr[7] -> arr[3] with arr[7], \
Curr++ -> curr = 4\
\
\
\

\f0\b Exercises
\f1\b0 \
- Stable sort or not?\
10 15(Mitali) 5 20 18 15(Parveen)\
- Take a sorted array of size 10 and use quick sort to sort it (9, 8, 7, 6, \'85.1)\
\

\f0\b \
\
Next session - problem solving
\f2\b0 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl306\partightenfactor0

\f1 \cf2 \
- Given a an array, instead of selecting a fixed index for partitioning the array, use a random index for partitioning step to bring randomization in Quick Sort Algorithm\
\
- Given an array and a number k , where k is smaller than the size of the array, we need to find the k\'92th smallest element in the given array. It is given that all array elements are distinct.\
\
- Given a set of n nuts of different sizes and n bolts of different sizes. There is a one-one mapping between nuts and bolts. Match nuts and bolts efficiently. \
\pard\pardeftab720\sl490\partightenfactor0
\cf2 Constraint: Comparison of a nut to another nut or a bolt to another bolt is not allowed. It means nut can only be compared with bolt and bolt can only be compared with nut to see which one is bigger/smaller.\
Another way of asking this problem is, given a box with locks and keys where one lock can be opened by one key in the box. We need to match the pair.\
\
Input : \'a0\
char nuts[] = \{\'91@\'92, \'91#\'92, \'91$\'92, \'91%\'92, \'91^\'92, \'91&\'92\}\
char bolts[] = \{\'91$\'92, \'91%\'92, \'91&\'92, \'91^\'92, \'91@\'92, \'91#\'92\}\
\'a0\
Output :\'a0\
Matched nuts and bolts are :\
# $ % & @ ^\
# $ % & @ ^\
\pard\pardeftab720\sl306\partightenfactor0
\cf2 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \
\
\
\
\
\
}