{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww35640\viewh19360\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 1. Stability in quick sort - we choose not to swap if equal
\f1\b0 \
First partitioning\
\
10 15(x) 5 20 18 15(y)\
\
Curr = 0\
10 \
\
Curr = 1. No swap if equal to pivot.\
10 15(x) \
\
Curr =1 \
10 15(x)\
\
10 5 15(x)\
\
Curr = 2\
10 5 15(x) 20 18\
\

\f0\b Final
\f1\b0  : 10 5  || 15(y) || 18 20 15(x) -> 
\f0\b Please not that in the class it was swapped incorrectly in the last step. We can see the out-of-order 15 values. This proves the sorting is not stable. 
\f1\b0 \
\
\

\f0\b 2. Worst case scenario - time complexity is O(n^2) 
\f1\b0 \
Starting array: 10 9 8 7 6 5 4 3 2 1\
Partitioning step 1: ___  || 1 || 9 8 7 6 5 4 3 2 10 -> 9 -> n - 1\
Partitioning step 2: Left arr -> quicksort( \{ \} ) and Right arr -> quicksort( \{ 9, 8, 7 6 5 4 3 2 10 \} ) -> 8 -> n - 2\
Step 3: 7 -> n - 3\
Step 4: 6 -> n - 4\

\f0\b \'85
\f1\b0 \
Last step: 1\
\

\f0\b Total #comparisons
\f1\b0  = 1 + 2 + \'85. + (n -2) + (n - 1)\
= n(n-1) / 2 = n^2 / 2 - n / 2 = 
\f0\b O(n^2)
\f1\b0 \
\
\
\

\f0\b EXERCISES
\f1\b0 \
\
1. Come up with an example where this algorithm reverses the order of equal numbers 
\f0\b \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0 \cf0 \
2. Implement median of 3 partitioning - median ( arr[low], arr[( low + high) / 2 ], arr[high] )\
\
3. Implement kth() without recursion}